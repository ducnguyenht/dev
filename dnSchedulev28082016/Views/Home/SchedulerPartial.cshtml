@functions{
    AppointmentRecurrenceFormSettings CreateAppointmentRecurrenceFormSettings(CustomAppointmentTemplateContainer container)
    {
        var settings = new AppointmentRecurrenceFormSettings();
        settings.Name = "appointmentRecurrenceForm";
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.IsRecurring = container.Appointment.IsRecurring;
        settings.DayNumber = container.RecurrenceDayNumber;
        settings.End = container.RecurrenceEnd;
        settings.Month = container.RecurrenceMonth;
        settings.OccurrenceCount = container.RecurrenceOccurrenceCount;
        settings.Periodicity = container.RecurrencePeriodicity;
        settings.RecurrenceRange = container.RecurrenceRange;
        settings.Start = container.Start;
        settings.WeekDays = container.RecurrenceWeekDays;
        settings.WeekOfMonth = container.RecurrenceWeekOfMonth;
        settings.RecurrenceType = container.RecurrenceType;
        settings.IsFormRecreated = container.IsFormRecreated;
        return settings;
    }
}
    
@Html.DevExpress().Scheduler(
settings =>
{
    settings.Name = "scheduler";
    settings.Start = DateTime.Now;//new DateTime(2010, 7, 1);
  
    #region Setting Routing
    settings.CallbackRouteValues = new { Controller = "Home", Action = "SchedulerPartial" };
    settings.EditAppointmentRouteValues = new { Controller = "Home", Action = "EditAppointment" };
    #endregion  
    
    #region Setting Appointment + Resource + Reminder
    settings.Storage.Appointments.Assign(SchedulerDataHelper.DefaultAppointmentStorage);
    settings.Storage.Resources.Assign(SchedulerDataHelper.DefaultResourceStorage);
    settings.Storage.EnableReminders = true;
    #endregion
    
    #region Setting Labels
    settings.Storage.Appointments.Labels.Clear();
    settings.Storage.Appointments.Labels.Add(new DevExpress.Web.ASPxScheduler.AppointmentLabel(System.Drawing.Color.FromArgb(242, 87, 87), "Very High"));
    settings.Storage.Appointments.Labels.Add(new DevExpress.Web.ASPxScheduler.AppointmentLabel(System.Drawing.Color.FromArgb(255, 198, 0), "High"));
    settings.Storage.Appointments.Labels.Add(new DevExpress.Web.ASPxScheduler.AppointmentLabel(System.Drawing.Color.FromArgb(190, 246, 36), "Normal"));
    settings.Storage.Appointments.Labels.Add(new DevExpress.Web.ASPxScheduler.AppointmentLabel(System.Drawing.Color.FromArgb(49, 128, 206), "Low"));
    settings.Storage.Appointments.Labels.Add(new DevExpress.Web.ASPxScheduler.AppointmentLabel(System.Drawing.Color.White, "Very Low"));
    #endregion
        
    #region Setting Status
    settings.Storage.Appointments.Statuses.Clear();
    settings.Storage.Appointments.Statuses.Add(System.Drawing.Color.FromArgb(242, 87, 87), "In Progress");
    settings.Storage.Appointments.Statuses.Add(System.Drawing.Color.FromArgb(255, 198, 0), "Fixed");
    settings.Storage.Appointments.Statuses.Add(System.Drawing.Color.FromArgb(190, 246, 36), "Open");
    settings.Storage.Appointments.Statuses.Add(System.Drawing.Color.FromArgb(49, 128, 206), "Verify");
    settings.Storage.Appointments.Statuses.Add(System.Drawing.Color.White, "Won't fix");
    #endregion
   
    #region Seting Popup Menu
    settings.PopupMenuShowing = (sender, e) =>
    {
        if (e.Menu.Id.Equals(SchedulerMenuItemId.AppointmentMenu))
        {
            e.Menu.Items[0].Text = "Open";
            e.Menu.Items[1].Text = "Edit Series";
            e.Menu.Items[2].Text = "Restore Default State";
            e.Menu.Items[3].Text = "Status";//Show Time As
            e.Menu.Items[4].Text = "Priority";//Label As
            e.Menu.Items[5].Text = "Delete";
        }
    };
    #endregion
    
    #region Setting Scroll + ResourcesPerPage
    settings.Views.DayView.ResourcesPerPage = 2;
    settings.Views.DayView.Styles.ScrollAreaHeight = System.Web.UI.WebControls.Unit.Pixel(400);
    settings.Views.WorkWeekView.ResourcesPerPage = 2;
    settings.Views.WorkWeekView.Styles.ScrollAreaHeight = System.Web.UI.WebControls.Unit.Pixel(400);
    settings.Views.TimelineView.ResourcesPerPage = 4;
    settings.Views.TimelineView.IntervalCount = 12;
    settings.Views.TimelineView.Styles.TimelineCellBody.Height = System.Web.UI.WebControls.Unit.Pixel(120);
    #endregion

    #region Setting Work time 
    settings.Views.DayView.ShowWorkTimeOnly = true;
    settings.Views.WorkWeekView.ShowWorkTimeOnly = true;
    DevExpress.XtraScheduler.TimeOfDayInterval visibleInterval = new DevExpress.XtraScheduler.TimeOfDayInterval(TimeSpan.FromHours(7), TimeSpan.FromHours(19));
    settings.Views.DayView.WorkTime = visibleInterval;
    settings.Views.WorkWeekView.WorkTime = visibleInterval;
    #endregion
    
    #region Setting Custom Edit form Template
    settings.OptionsForms.RecurrenceFormName = "appointmentRecurrenceForm";
    
    settings.PrepareAppointmentFormPopupContainer += (s, e) =>
    {
        //e.Popup.HeaderText = "You can edit the details about a meeting here";
        e.Popup.Width = System.Web.UI.WebControls.Unit.Pixel(1000);//System.Web.UI.WebControls.Unit.Pixel(800);
    };
    
    settings.AppointmentFormShowing = (sender, e) =>
    {
        var scheduler = sender as MVCxScheduler;
        if (scheduler != null)
            e.Container = new CustomAppointmentTemplateContainer(scheduler);
    };

    settings.OptionsForms.SetAppointmentFormTemplateContent(c =>
    {
        var container = (CustomAppointmentTemplateContainer)c;
        var schedule = ViewData["EditableSchedule"] != null
            ? (Schedule)ViewData["EditableSchedule"]
            : new Schedule()
            {
                ID = container.Appointment.Id == null ? -1 : (int)container.Appointment.Id,
                Subject = container.Appointment.Subject,
                Location = container.Appointment.Location,
                StartTime = container.Appointment.Start,
                EndTime = container.Appointment.End,
                AllDay = container.Appointment.AllDay,
                Description = container.Appointment.Description,
                EventType = (int?)container.Appointment.Type,
                Status = container.Appointment.StatusId,
                Label = container.Appointment.LabelId,                
                HasReminder = container.Appointment.HasReminder,
                Reminder = container.Appointment.Reminder,
                
                #region Custom field
                OpportunityId = container.OpportunityId,
                CustomerId=container.CustomerId,
                ScheduleTypeId=container.ScheduleTypeId,
                RequestBy=container.RequestBy,
                RequestDate=container.RequestDate,
                Estimation=container.Estimation,
                SpentTime=container.SpentTime,
                Price = container.Price,
                ContactInfo = container.ContactInfo,
                #endregion Custom field
            };
        #region Binding Resources
        ViewBag.DeleteButtonEnabled = container.CanDeleteAppointment;
        ViewBag.IsRecurring = container.Appointment.IsRecurring;
        ViewBag.AppointmentRecurrenceFormSettings = CreateAppointmentRecurrenceFormSettings(container);

        ViewBag.ResourceDataSource = container.ResourceDataSource;
        ViewBag.StatusDataSource = container.StatusDataSource;
        ViewBag.LabelDataSource = container.LabelDataSource;
        ViewBag.ReminderDataSource = container.ReminderDataSource;

        ViewBag.CustomerDataSource = container.CustomerDataSource;
        ViewBag.ScheduleTypeDataSource = container.ScheduleTypeDataSource;
        #endregion

        Html.RenderPartial("CustomAppointmentFormPartial", schedule);
    });
    #endregion
   

}).Bind(Model.Appointments, Model.Resources).GetHtml()

@*//var lstLB = settings.Storage.Appointments.Labels;
       //for (int i = 0; i < lstLB.Count; i++)
       //{
       //    DevExpress.Web.ASPxScheduler.AppointmentLabel standardLabel = lstLB[i];
       //    if (standardLabel.DisplayName == DevExpress.XtraScheduler.Localization.SchedulerLocalizer.GetString(DevExpress.XtraScheduler.Localization.SchedulerStringId.AppointmentLabel_Important))
       //    {
       //        standardLabel.DisplayName = "Very Important";
       //        standardLabel.MenuCaption = "Very Important";
       //    }
       //    if (standardLabel.DisplayName == DevExpress.XtraScheduler.Localization.SchedulerLocalizer.GetString(DevExpress.XtraScheduler.Localization.SchedulerStringId.AppointmentLabel_Vacation))
       //    {
       //        standardLabel.DisplayName = "Indefinite Leave";
       //        standardLabel.MenuCaption = "Indefinite Leave";
       //    }
       //}

              //settings.Width = 800;//System.Web.UI.WebControls.Unit.Percentage(100);
           //settings.Height = 1000;

       //e.Menu.Items.Remove(e.Menu.Items.FindByName(SchedulerMenuItemId.LabelSubMenu.ToString()));
               //e.Menu.Items.Remove(e.Menu.Items.FindByName(SchedulerMenuItemId.StatusSubMenu.ToString()));

    //ffsettings.VerticalScrollBarMode = ScrollBarMode.Visible;
       //settings.Views.DayView.Styles.ScrollAreaHeight = 1000;

     //settings.Views.DayView.ShowWorkTimeOnly = true;
    //settings.QueryWorkTime += (s, e) =>
    //{
    //    //e.WorkTimes.Clear();
    //    //e.WorkTimes.Add(new TimeOfDayInterval(TimeSpan.FromHours(8), TimeSpan.FromHours(12)));
    //    //e.WorkTimes.Add(new TimeOfDayInterval(TimeSpan.FromHours(14), TimeSpan.FromHours(22)));
    //    //ffsettings.VerticalScrollBarMode = ScrollBarMode.Visible;
    //    //settings.Views.DayView.Styles.ScrollAreaHeight = 1000;
    //    e.WorkTime = new TimeOfDayInterval(TimeSpan.FromHours(8), TimeSpan.FromHours(22));
    //};
*@
<!-- #region Test -->

<!-- #endregion -->