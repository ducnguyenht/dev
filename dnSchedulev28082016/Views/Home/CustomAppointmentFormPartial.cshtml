@model Schedule
@using System.Web.UI.WebControls

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

    @using (Html.BeginForm()) {
<div class="row">
    <div class="col-md-8">
        @if (Model.EventType == 0 || Model.EventType == 1) {
        <div class="row">
            <div class="col-md-2">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "CarId";
                settings.Text = "Opportunity:";
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
            <div class="col-md-4">
                @Html.DevExpress().ComboBox(
                settings => {
                settings.Name = "CarId";
                settings.Properties.ValueType = typeof(Int32);
                settings.Properties.ValueField = "ID";
                settings.Properties.TextField = "Model";
                settings.Width = Unit.Percentage(100);
                }).BindList(ViewBag.ResourceDataSource).Bind(Model.CarId).GetHtml()
            </div>
            <div class="col-md-2">
                @Html.DevExpress().CheckBox(
                settings => {
                settings.Name = "HasReminder";
                settings.Text = "Reminder";
                settings.Properties.ClientSideEvents.CheckedChanged = "OnHasReminderCheckedChanged";
                }).Bind(Model.HasReminder).GetHtml()
            </div>
            <div class="col-md-4">
                @{ TimeSpan timeBeforeStart = Model.Reminder != null ? Model.Reminder.TimeBeforeStart : TimeSpan.FromMinutes(15); }
                @Html.DevExpress().ComboBox(
                settings => {
                settings.Name = "Reminder.TimeBeforeStart";
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValueType = typeof(TimeSpan);
                settings.Properties.ValueField = "Value";
                settings.Properties.TextField = "Text";
                settings.Properties.ClientSideEvents.Init = "OnTimeBeforeStartComboBoxInit";
                }).BindList(ViewBag.ReminderDataSource).Bind(timeBeforeStart).GetHtml()
            </div>
        </div>
        } else {
        <div class="row">
            <div class="col-md-4">
                @Html.DevExpress().CheckBox(
                settings => {
                settings.Name = "HasReminder";
                settings.Text = "Reminder";
                settings.Width = Unit.Percentage(100);
                settings.Properties.ClientSideEvents.CheckedChanged = "OnHasReminderCheckedChanged";
                }).Bind(Model.HasReminder).GetHtml()
            </div>
            <div class="col-md-8">
                @{ TimeSpan timeBeforeStart = Model.Reminder != null ? Model.Reminder.TimeBeforeStart : TimeSpan.FromMinutes(15); }
                @Html.DevExpress().ComboBox(
                settings => {
                settings.Name = "Reminder.TimeBeforeStart";
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValueType = typeof(TimeSpan);
                settings.Properties.ValueField = "Value";
                settings.Properties.TextField = "Text";
                settings.Properties.ClientSideEvents.Init = "OnTimeBeforeStartComboBoxInit";
                }).BindList(ViewBag.ReminderDataSource).Bind(timeBeforeStart).GetHtml()
            </div>
        </div>
        }
        <div class="row">
            <div class="col-md-4"></div>
            <div class="col-md-8"></div>
        </div>
        <div class="row">
            <div class="col-md-2">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "Title";
                settings.Text = "Title:";
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
            <div class="col-md-10">
                @Html.DevExpress().TextBox(
                settings => {
                settings.Name = "Title";
                settings.ShowModelErrors = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.Width = Unit.Percentage(100);
                }).Bind(Model.Subject).GetHtml()
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "Description";
                settings.Text = "Description:";
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
            <div class="col-md-10">
                @Html.DevExpress().Memo(
                settings => {
                settings.Name = "Description";
                settings.Properties.Rows = 5;
                settings.ShowModelErrors = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.Width = Unit.Percentage(100);
                }).Bind(Model.Description).GetHtml()
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                @Html.DevExpress().CheckBox(
                settings => {
                settings.Name = "AllDay";
                settings.Width = Unit.Percentage(100);
                }).Bind(Model.AllDay).GetHtml()
            </div>
            <div class="col-md-11">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "AllDay";
                settings.Text = "All Day Event";
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
        </div>
      
    </div>
    <div class="col-md-4">
        <div class="row">
            <div class="col-md-5">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "Status";
                settings.Text = "Priority";//Show Time As:
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
            <div class="col-md-7">
                @Html.DevExpress().ComboBox(
                settings => {
                settings.Name = "Status";
                settings.Properties.ValueType = typeof(Int32);
                settings.Properties.ValueField = "Value";
                settings.Properties.TextField = "Text";
                settings.Width = Unit.Percentage(100);
                }).BindList(ViewBag.StatusDataSource).Bind(Model.Status).GetHtml()
            </div>
        </div>
        <div class="row">
            <div class="col-md-5">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "StartTime";
                settings.Text = "Start time:";
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
            <div class="col-md-7">
                @Html.DevExpress().DateEdit(
                settings => {
                settings.Name = "StartTime";
                settings.Properties.EditFormat = EditFormat.DateTime;
                settings.ShowModelErrors = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.Width = Unit.Percentage(100);
                }).Bind(Model.StartTime).GetHtml()
            </div>
        </div>
        <div class="row">
            <div class="col-md-5">
                @Html.DevExpress().Label(
                settings => {
                settings.AssociatedControlName = "EndTime";
                settings.Text = "End time:";
                settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </div>
            <div class="col-md-7">
                @Html.DevExpress().DateEdit(
                settings => {
                settings.Name = "EndTime";
                settings.Properties.EditFormat = EditFormat.DateTime;
                settings.ShowModelErrors = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.Width = Unit.Percentage(100);
                }).Bind(Model.EndTime).GetHtml()
            </div>
        </div>



    </div>
    <div class="col-md-12">
        @Html.DevExpress().AppointmentRecurrenceForm(ViewBag.AppointmentRecurrenceFormSettings).GetHtml()
    </div>
</div>
<table cellpadding="0" cellspacing="0" style="width: 100%; height: 35px;">
    <tr>
        <td style="width: 100%; height: 100%;" align="center">
            <table style="height: 100%;">
                <tr>
                    <td>
                        @Html.DevExpress().Button(
                        settings => {
                        settings.Name = "Apply";
                        settings.Text = "Ok";
                        settings.Width = Unit.Pixel(91);
                        settings.ClientSideEvents.Click = "OnAppointmentFormSave";
                        }).GetHtml()
                    </td>
                    <td>
                        @Html.DevExpress().Button(
                        settings => {
                        settings.Name = "Cancel";
                        settings.Text = "Cancel";
                        settings.ClientSideEvents.Click = "function(s, e){ scheduler.AppointmentFormCancel(); }";
                        settings.Width = Unit.Pixel(91);
                        }).GetHtml()
                    </td>
                    <td>
                        @Html.DevExpress().Button(
                        settings => {
                        settings.Name = "Delete";
                        settings.Text = "Delete";
                        settings.Width = Unit.Pixel(91);
                        settings.Enabled = ViewBag.DeleteButtonEnabled;
                        settings.ClientSideEvents.Click = "function(s, e){ scheduler.AppointmentFormDelete(); }";
                        }).GetHtml()
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>
<table cellpadding="0" cellspacing="0" style="width: 100%;">
    <tr>
        <td style="width: 100%;" align="left">
            @Html.DevExpress().SchedulerStatusInfo(
            settings => {
            settings.Name = "schedulerStatusInfo";
            settings.Priority = 1;
            settings.SchedulerName = "scheduler";
            }).GetHtml()
        </td>
    </tr>

</table>
        }
        @*

<tr>
    <td class="auto-style3">Request Date</td>
    <td class="auto-style5">&nbsp;</td>
</tr>
<tr>
    <td class="auto-style3">Assignee</td>
    <td class="auto-style5">&nbsp;</td>
</tr>
<tr>
    <td class="auto-style3">Estimation</td>
    <td class="auto-style5">&nbsp;</td>
</tr>
<tr>
    <td class="auto-style3">Spent Time</td>
    <td class="auto-style5">&nbsp;</td>
</tr>*@
